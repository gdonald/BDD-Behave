
use v6.d;
use lib 'lib';
use BDD::Behave::Actions;
use BDD::Behave::Files;
use BDD::Behave::Grammar;
use BDD::Behave::Lets;
use Test;
use Test::Output;

plan 9;

my $m;
my $k;
my $out;
my $str;

$out = "\n    \x[1B][36m⮑  \x[1B][0m\"a block\" \n\n    \x[1B][36m⮑  \x[1B][0m\"another block\" \n";
$str = 'use Foo; use Bar::Baz; describe -> "a block" {} describe -> "another block" {}';
output-is { $m = Grammar.parse($str, :rule<TOP>) }, $out, '<TOP> parses correctly';
ok $m<statements><use-statement>[0].Str eq 'use Foo; ';
ok $m<statements><use-statement>[1].Str eq 'use Bar::Baz; ';
ok $m<statements><use-statement>[0]<module-name>.Str eq 'Foo';
ok $m<statements><use-statement>[1]<module-name>.Str eq 'Bar::Baz';

$m = Grammar.parse('use Foo;', :rule<use-statement>);
ok $m.Str eq 'use Foo;';
$m = Grammar.parse('use Foo::Bar;', :rule<use-statement>);
ok $m.Str eq 'use Foo::Bar;';
$m = Grammar.parse('use Foo::Bar::Baz;', :rule<use-statement>);
ok $m.Str eq 'use Foo::Bar::Baz;';

$m = Grammar.parse('use Foo;', :rule<statements>);
ok $m.Str eq 'use Foo;';
