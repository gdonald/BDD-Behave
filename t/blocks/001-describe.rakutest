
use v6.d;
use lib 'lib';
use BDD::Behave::Actions;
use BDD::Behave::Files;
use BDD::Behave::Grammar;
use BDD::Behave::Lets;
use Test;
use Test::Output;

plan 28;

my $m;
my $k;
my $out;
my $str;

$out = "\n    \x[1B][36m⮑  \x[1B][0m\"a block\" \n\n    \x[1B][36m⮑  \x[1B][0m\"another block\" \n";
$str = 'use Foo; use Bar::Baz; describe -> "a block" {} describe -> "another block" {}';
output-is { $m = Grammar.parse($str, :rule<TOP>) }, $out, '<TOP> parses correctly';
ok $m<statements><describe-block>.Str eq "describe -> \"a block\" \{}  describe -> \"another block\" \{}";
ok $m<statements><describe-block>[0]<quoted-string>.Str eq "\"a block\" ";
ok $m<statements><describe-block>[1]<quoted-string>.Str eq "\"another block\" ";

$out = "\n    \x[1B][36m⮑  \x[1B][0m\"a empty block\" \n";
output-is { $m = Grammar.parse('describe -> "a empty block" {}', :rule<describe-block>) }, $out, '<describe-block> parses correctly';
ok $m.Str eq 'describe -> "a empty block" {}';

$out = "\n    \x[1B][36m⮑  \x[1B][0m\"contains a context block\" \n\n        \x[1B][36m⮑  \x[1B][0m\"contains an it block\" \n            \x[1B][36m⮑  \x[1B][0m\"1 is 1\" \n                \x[1B][36m⮑  \x[1B][0m\x[1B][32mSUCCESS\x[1B][0m\n";
output-is { $m = Grammar.parse('describe -> "contains a context block" { context -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } } }', :rule<describe-block>) }, $out, '<describe-block> parses correctly';
ok $m.Str eq 'describe -> "contains a context block" { context -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } } }';
output-is { $m = Grammar.parse('describe-> "contains a context block" { context -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } } }', :rule<describe-block>) }, $out, '<describe-block> parses correctly';
ok $m.Str eq 'describe-> "contains a context block" { context -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } } }';
output-is { $m = Grammar.parse('describe ->"contains a context block" { context -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } } }', :rule<describe-block>) }, $out, '<describe-block> parses correctly';
ok $m.Str eq 'describe ->"contains a context block" { context -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } } }';

$out = "\n    \x[1B][36m⮑  \x[1B][0m\"contains a context block\"\n\n        \x[1B][36m⮑  \x[1B][0m\"contains an it block\" \n            \x[1B][36m⮑  \x[1B][0m\"1 is 1\" \n                \x[1B][36m⮑  \x[1B][0m\x[1B][32mSUCCESS\x[1B][0m\n";
output-is { $m = Grammar.parse('describe -> "contains a context block"{ context -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } } }', :rule<describe-block>) }, $out, '<describe-block> parses correctly';
ok $m.Str eq 'describe -> "contains a context block"{ context -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } } }';

$out = "\n    \x[1B][36m⮑  \x[1B][0m\"contains a context block\" \n\n        \x[1B][36m⮑  \x[1B][0m\"contains an it block\" \n            \x[1B][36m⮑  \x[1B][0m\"1 is 1\" \n                \x[1B][36m⮑  \x[1B][0m\x[1B][32mSUCCESS\x[1B][0m\n";
output-is { $m = Grammar.parse('describe -> "contains a context block" {context -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } } }', :rule<describe-block>) }, $out, '<describe-block> parses correctly';
ok $m.Str eq 'describe -> "contains a context block" {context -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } } }';
output-is { $m = Grammar.parse('describe -> "contains a context block" { context -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } }}', :rule<describe-block>) }, $out, '<describe-block> parses correctly';
ok $m.Str eq 'describe -> "contains a context block" { context -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } }}';

$out = "\n    \x[1B][36m⮑  \x[1B][0m\"contains two context blocks\" \n\n        \x[1B][36m⮑  \x[1B][0m\"contains an it block\" \n            \x[1B][36m⮑  \x[1B][0m\"1 is 1\" \n                \x[1B][36m⮑  \x[1B][0m\x[1B][32mSUCCESS\x[1B][0m\n\n        \x[1B][36m⮑  \x[1B][0m\"contains an it block\" \n            \x[1B][36m⮑  \x[1B][0m\"1 is 1\" \n                \x[1B][36m⮑  \x[1B][0m\x[1B][32mSUCCESS\x[1B][0m\n";
output-is { $m = Grammar.parse('describe -> "contains two context blocks" { context -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } } context -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } } }', :rule<describe-block>) }, $out, '<describe-block> parses correctly';
ok $m.Str eq 'describe -> "contains two context blocks" { context -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } } context -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } } }';

$out = "\n    \x[1B][36m⮑  \x[1B][0m\"contains an it block\" \n        \x[1B][36m⮑  \x[1B][0m\"1 is 1\" \n            \x[1B][36m⮑  \x[1B][0m\x[1B][32mSUCCESS\x[1B][0m\n";
output-is { $m = Grammar.parse('describe -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } }', :rule<describe-block>) }, $out, '<describe-block> parses correctly';
ok $m.Str eq 'describe -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } }';

$out = "\n    \x[1B][36m⮑  \x[1B][0m\"contains two it blocks\" \n        \x[1B][36m⮑  \x[1B][0m\"1 is 1\" \n            \x[1B][36m⮑  \x[1B][0m\x[1B][32mSUCCESS\x[1B][0m\n        \x[1B][36m⮑  \x[1B][0m\"1 is 1\" \n            \x[1B][36m⮑  \x[1B][0m\x[1B][32mSUCCESS\x[1B][0m\n";
output-is { $m = Grammar.parse('describe -> "contains two it blocks" { it -> "1 is 1" { expect(1).to.be(1); } it -> "1 is 1" { expect(1).to.be(1); } }', :rule<describe-block>) }, $out, '<describe-block> parses correctly';
ok $m.Str eq 'describe -> "contains two it blocks" { it -> "1 is 1" { expect(1).to.be(1); } it -> "1 is 1" { expect(1).to.be(1); } }';

$out = "\n    \x[1B][36m⮑  \x[1B][0m\"contains a describe block\" \n\n        \x[1B][36m⮑  \x[1B][0m\"contains a context block\" \n\n            \x[1B][36m⮑  \x[1B][0m\"contains an it block\" \n                \x[1B][36m⮑  \x[1B][0m\"1 is 1\" \n                    \x[1B][36m⮑  \x[1B][0m\x[1B][32mSUCCESS\x[1B][0m\n";
output-is { $m = Grammar.parse('describe -> "contains a describe block" { describe -> "contains a context block" { context -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } } } }', :rule<describe-block>) }, $out, '<describe-block> parses correctly';
ok $m.Str eq 'describe -> "contains a describe block" { describe -> "contains a context block" { context -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } } } }';

$out = "\n    \x[1B][36m⮑  \x[1B][0m\"contains two describe blocks\" \n\n        \x[1B][36m⮑  \x[1B][0m\"contains a context block\" \n\n            \x[1B][36m⮑  \x[1B][0m\"contains an it block\" \n                \x[1B][36m⮑  \x[1B][0m\"1 is 1\" \n                    \x[1B][36m⮑  \x[1B][0m\x[1B][32mSUCCESS\x[1B][0m\n\n        \x[1B][36m⮑  \x[1B][0m\"contains a context block\" \n\n            \x[1B][36m⮑  \x[1B][0m\"contains an it block\" \n                \x[1B][36m⮑  \x[1B][0m\"1 is 1\" \n                    \x[1B][36m⮑  \x[1B][0m\x[1B][32mSUCCESS\x[1B][0m\n";
output-is { $m = Grammar.parse('describe -> "contains two describe blocks" { describe -> "contains a context block" { context -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } } } describe -> "contains a context block" { context -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } } } }', :rule<describe-block>) }, $out, '<describe-block> parses correctly';
ok $m.Str eq 'describe -> "contains two describe blocks" { describe -> "contains a context block" { context -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } } } describe -> "contains a context block" { context -> "contains an it block" { it -> "1 is 1" { expect(1).to.be(1); } } } }';
