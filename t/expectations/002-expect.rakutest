
use v6.d;
use lib 'lib';
use BDD::Behave::Actions;
use BDD::Behave::Files;
use BDD::Behave::Grammar;
use BDD::Behave::Lets;
use Test;
use Test::Output;

plan 7;

my $m;
my $k;
my $out;
my $str;

$m = Grammar.parse('expect(1)', :rule<expect>);
ok $m.Str eq 'expect(1)';
$m = Grammar.parse('expect( 1)', :rule<expect>);
ok $m.Str eq 'expect( 1)';
$m = Grammar.parse('expect(1 )', :rule<expect>);
ok $m.Str eq 'expect(1 )';
$m = Grammar.parse('expect( 1 )', :rule<expect>);
ok $m.Str eq 'expect( 1 )';

$m = Grammar.parse('expect(', :rule<expect>);
nok $m;
$m = Grammar.parse('expectx', :rule<expect>);
nok $m;
$m = Grammar.parse('xexpect', :rule<expect>);
nok $m;
