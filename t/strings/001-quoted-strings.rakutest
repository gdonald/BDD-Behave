
use v6.d;
use lib 'lib';
use BDD::Behave::Actions;
use BDD::Behave::Files;
use BDD::Behave::Grammar;
use BDD::Behave::Lets;
use Test;
use Test::Output;

plan 14;

my $m;
my $k;
my $out;
my $str;

$m = Grammar.parse('"one two three"', :rule<quoted-string>);
ok $m.Str eq '"one two three"';
$m = Grammar.parse("'one two three'", :rule<quoted-string>);
ok $m.Str eq "'one two three'";

$m = Grammar.parse('"one"', :rule<double-quoted-string>);
ok $m.Str eq '"one"';
$m = Grammar.parse('"one two"', :rule<double-quoted-string>);
ok $m.Str eq '"one two"';
$m = Grammar.parse('"one two three"', :rule<double-quoted-string>);
ok $m.Str eq '"one two three"';

$m = Grammar.parse("'one'", :rule<single-quoted-string>);
ok $m.Str eq "'one'";
$m = Grammar.parse("'one two'", :rule<single-quoted-string>);
ok $m.Str eq "'one two'";
$m = Grammar.parse("'one two three'", :rule<single-quoted-string>);
ok $m.Str eq "'one two three'";

$m = Grammar.parse('one', :rule<phrase>);
ok $m.Str eq 'one';
$m = Grammar.parse('one two', :rule<phrase>);
ok $m.Str eq 'one two';
$m = Grammar.parse('one two three', :rule<phrase>);
ok $m.Str eq 'one two three';

$m = Grammar.parse('Foo', :rule<module-name>);
ok $m.Str eq 'Foo';
$m = Grammar.parse('Foo::Bar', :rule<module-name>);
ok $m.Str eq 'Foo::Bar';
$m = Grammar.parse('Foo::Bar::Baz', :rule<module-name>);
ok $m.Str eq 'Foo::Bar::Baz';
