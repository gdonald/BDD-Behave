
use v6.d;
use lib 'lib';
use BDD::Behave::Actions;
use BDD::Behave::Files;
use BDD::Behave::Grammar;
use BDD::Behave::Lets;
use Test;
use Test::Output;

plan 17;

my $m;
my $k;
my $out;
my $str;

$m = Grammar.parse('let(:foo)', :rule<let>);
ok $m eq 'let(:foo)';
ok $m<symbol> eq ':foo';

$m = Grammar.parse('let(:foo) => { 42 };', :rule<let-statement>, :actions(Actions));
ok ($m<let><symbol> eq ':foo');
ok ($m<block-content> == 42);

$m = Grammar.parse('let(:foo) => { Foo.new };', :rule<let-statement>, :actions(Actions));
ok ($m<let><symbol> eq ':foo');
ok ($m<block-content> eq 'Foo.new');

$m = Grammar.parse('let(:foo) => { Foo.new(17) };', :rule<let-statement>, :actions(Actions));
ok ($m<let><symbol> eq ':foo');
ok ($m<block-content> eq 'Foo.new(17)');

$m = Grammar.parse('let(:foo) => { 42 };', :rule<let-statement>);
ok $m eq 'let(:foo) => { 42 };';
$m = Grammar.parse('let(:foo) => {42};', :rule<let-statement>);
ok $m eq 'let(:foo) => {42};';
$m = Grammar.parse('let(:foo)=>{ 42 };', :rule<let-statement>);
ok $m eq 'let(:foo)=>{ 42 };';

$m = Grammar.parse('let(:foo) => { "42" };', :rule<let-statement>);
ok $m eq 'let(:foo) => { "42" };';
$m = Grammar.parse('let(:foo) => {"42"};', :rule<let-statement>);
ok $m eq 'let(:foo) => {"42"};';
$m = Grammar.parse('let(:foo)=>{ "42" };', :rule<let-statement>);
ok $m eq 'let(:foo)=>{ "42" };';

$m = Grammar.parse("let(:foo) => \{ '42' \};", :rule<let-statement>);
ok $m eq "let(:foo) => \{ '42' \};";
$m = Grammar.parse("let(:foo) => \{'42'\};", :rule<let-statement>);
ok $m eq "let(:foo) => \{'42'\};";
$m = Grammar.parse("let(:foo)=>\{ '42' \};", :rule<let-statement>);
ok $m eq "let(:foo)=>\{ '42' \};";
